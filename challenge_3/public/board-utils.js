"use strict";

var boardUtils = {};

boardUtils.findSpot = function (board, col) {
  for (var i = -1; i < board.length - 1; i++) {
    if (board[i + 1][col]) {
      return i;
    }
  }
  return i;
};

boardUtils.didWin = function (row, col, board, color) {
  return this.winInRow(row, board, color) || this.winInCol(col, board, color) || this.winInDiagonals(row, col, board, color);
};

boardUtils.winInRow = function (row, board, color) {
  var counter = 0;
  var width = board[0].length;
  for (var col = 0; col < width; col++) {
    if (board[row][col] === color) {
      counter++;
      if (counter === 4) {
        return true;
      }
    } else {
      counter = 0;
    }
  }
  return false;
};

boardUtils.winInCol = function (col, board, color) {
  var counter = 0;
  var height = board.length;
  for (var row = 0; row < height; row++) {
    if (board[row][col] === color) {
      counter++;
      if (counter === 4) {
        return true;
      }
    } else {
      counter = 0;
    }
    console.log(counter);
  }
  return false;
};

boardUtils.winInDiagonals = function (row, col, board, color) {
  var startColMajor = col - row;
  var startColMinor = col + row;
  return this.winInMajorDiagonal(startColMajor, board, color) || this.winInMinorDiagonal(startColMinor, board, color);
};

boardUtils.winInMajorDiagonal = function (startCol, board, color) {
  var width = board[0].length;
  var height = board.length;

  var row = 0;
  var col = startCol;
  var counter = 0;
  while (row < height && col < width) {
    if (board[row][col] === color) {
      counter++;
      if (counter === 4) {
        return true;
      }
    } else {
      counter = 0;
    }
    row++;
    col++;
  }
};

boardUtils.winInMinorDiagonal = function (startCol, board, color) {
  var width = board[0].length;
  var height = board.length;

  var row = 0;
  var col = startCol;
  var counter = 0;
  while (row < height && col >= 0) {
    if (board[row][col] === color) {
      counter++;
      if (counter === 4) {
        return true;
      }
    } else {
      counter = 0;
    }
    row++;
    col--;
  }
};

window.boardUtils = boardUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9ib2FyZC11dGlscy5qcyJdLCJuYW1lcyI6WyJib2FyZFV0aWxzIiwiZmluZFNwb3QiLCJib2FyZCIsImNvbCIsImkiLCJsZW5ndGgiLCJkaWRXaW4iLCJyb3ciLCJjb2xvciIsIndpbkluUm93Iiwid2luSW5Db2wiLCJ3aW5JbkRpYWdvbmFscyIsImNvdW50ZXIiLCJ3aWR0aCIsImhlaWdodCIsImNvbnNvbGUiLCJsb2ciLCJzdGFydENvbE1ham9yIiwic3RhcnRDb2xNaW5vciIsIndpbkluTWFqb3JEaWFnb25hbCIsIndpbkluTWlub3JEaWFnb25hbCIsInN0YXJ0Q29sIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGFBQWEsRUFBakI7O0FBRUFBLFdBQVdDLFFBQVgsR0FBc0IsVUFBU0MsS0FBVCxFQUFnQkMsR0FBaEIsRUFBcUI7QUFDekMsT0FBSyxJQUFJQyxJQUFJLENBQUMsQ0FBZCxFQUFpQkEsSUFBSUYsTUFBTUcsTUFBTixHQUFhLENBQWxDLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN4QyxRQUFJRixNQUFNRSxJQUFFLENBQVIsRUFBV0QsR0FBWCxDQUFKLEVBQXFCO0FBQ25CLGFBQU9DLENBQVA7QUFDRDtBQUNGO0FBQ0QsU0FBT0EsQ0FBUDtBQUNELENBUEQ7O0FBU0FKLFdBQVdNLE1BQVgsR0FBb0IsVUFBU0MsR0FBVCxFQUFjSixHQUFkLEVBQW1CRCxLQUFuQixFQUEwQk0sS0FBMUIsRUFBaUM7QUFDbkQsU0FBTyxLQUFLQyxRQUFMLENBQWNGLEdBQWQsRUFBbUJMLEtBQW5CLEVBQTBCTSxLQUExQixLQUNKLEtBQUtFLFFBQUwsQ0FBY1AsR0FBZCxFQUFtQkQsS0FBbkIsRUFBMEJNLEtBQTFCLENBREksSUFFSixLQUFLRyxjQUFMLENBQW9CSixHQUFwQixFQUF5QkosR0FBekIsRUFBOEJELEtBQTlCLEVBQXFDTSxLQUFyQyxDQUZIO0FBR0QsQ0FKRDs7QUFNQVIsV0FBV1MsUUFBWCxHQUFzQixVQUFTRixH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TEEsZ0JBQVUsQ0FBVjtBQUNEO0FBQ0RMO0FBQ0FKO0FBQ0Q7QUFDRixDQW5CRDs7QUFxQkFtQixPQUFPdEIsVUFBUCxHQUFvQkEsVUFBcEIiLCJmaWxlIjoiYm9hcmQtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYm9hcmRVdGlscyA9IHt9O1xuXG5ib2FyZFV0aWxzLmZpbmRTcG90ID0gZnVuY3Rpb24oYm9hcmQsIGNvbCkge1xuICBmb3IgKHZhciBpID0gLTE7IGkgPCBib2FyZC5sZW5ndGgtMTsgaSsrKSB7XG4gICAgaWYgKGJvYXJkW2krMV1bY29sXSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpO1xufVxuXG5ib2FyZFV0aWxzLmRpZFdpbiA9IGZ1bmN0aW9uKHJvdywgY29sLCBib2FyZCwgY29sb3IpIHtcbiAgcmV0dXJuIHRoaXMud2luSW5Sb3cocm93LCBib2FyZCwgY29sb3IpIFxuICB8fCB0aGlzLndpbkluQ29sKGNvbCwgYm9hcmQsIGNvbG9yKSBcbiAgfHwgdGhpcy53aW5JbkRpYWdvbmFscyhyb3csIGNvbCwgYm9hcmQsIGNvbG9yKVxufVxuXG5ib2FyZFV0aWxzLndpbkluUm93ID0gZnVuY3Rpb24ocm93LCBib2FyZCwgY29sb3IpIHtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgd2lkdGggPSBib2FyZFswXS5sZW5ndGg7XG4gIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHdpZHRoOyBjb2wrKykge1xuICAgIGlmIChib2FyZFtyb3ddW2NvbF0gPT09IGNvbG9yKSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICBpZiAoY291bnRlciA9PT0gNCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnRlciA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuYm9hcmRVdGlscy53aW5JbkNvbCA9IGZ1bmN0aW9uKGNvbCwgYm9hcmQsIGNvbG9yKSB7XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGhlaWdodCA9IGJvYXJkLmxlbmd0aDtcbiAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgaGVpZ2h0OyByb3crKykge1xuICAgIGlmIChib2FyZFtyb3ddW2NvbF0gPT09IGNvbG9yKSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICBpZiAoY291bnRlciA9PT0gNCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnRlciA9IDA7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGNvdW50ZXIpXG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5ib2FyZFV0aWxzLndpbkluRGlhZ29uYWxzID0gZnVuY3Rpb24ocm93LCBjb2wsIGJvYXJkLCBjb2xvcikge1xuICB2YXIgc3RhcnRDb2xNYWpvciA9IGNvbCAtIHJvdzsgXG4gIHZhciBzdGFydENvbE1pbm9yID0gY29sICsgcm93O1xuICByZXR1cm4gdGhpcy53aW5Jbk1ham9yRGlhZ29uYWwoc3RhcnRDb2xNYWpvciwgYm9hcmQsIGNvbG9yKSBcbiAgfHwgdGhpcy53aW5Jbk1pbm9yRGlhZ29uYWwoc3RhcnRDb2xNaW5vciwgYm9hcmQsIGNvbG9yKTtcbn1cblxuYm9hcmRVdGlscy53aW5Jbk1ham9yRGlhZ29uYWwgPSBmdW5jdGlvbihzdGFydENvbCwgYm9hcmQsIGNvbG9yKSB7XG4gIHZhciB3aWR0aCA9IGJvYXJkWzBdLmxlbmd0aDtcbiAgdmFyIGhlaWdodCA9IGJvYXJkLmxlbmd0aDtcblxuICB2YXIgcm93ID0gMDtcbiAgdmFyIGNvbCA9IHN0YXJ0Q29sO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHdoaWxlIChyb3cgPCBoZWlnaHQgJiYgY29sIDwgd2lkdGgpIHtcbiAgICBpZiAoYm9hcmRbcm93XVtjb2xdID09PSBjb2xvcikge1xuICAgICAgY291bnRlcisrXG4gICAgICBpZiAoY291bnRlciA9PT0gNCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnRlciA9IDA7XG4gICAgfVxuICAgIHJvdysrO1xuICAgIGNvbCsrO1xuICB9XG59XG5cbmJvYXJkVXRpbHMud2luSW5NaW5vckRpYWdvbmFsID0gZnVuY3Rpb24oc3RhcnRDb2wsIGJvYXJkLCBjb2xvcikge1xuICB2YXIgd2lkdGggPSBib2FyZFswXS5sZW5ndGg7XG4gIHZhciBoZWlnaHQgPSBib2FyZC5sZW5ndGg7XG5cbiAgdmFyIHJvdyA9IDA7XG4gIHZhciBjb2wgPSBzdGFydENvbDtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB3aGlsZSAocm93IDwgaGVpZ2h0ICYmIGNvbCA+PSAwKSB7XG4gICAgaWYgKGJvYXJkW3Jvd11bY29sXSA9PT0gY29sb3IpIHtcbiAgICAgIGNvdW50ZXIrK1xuICAgICAgaWYgKGNvdW50ZXIgPT09IDQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ZXIgPSAwO1xuICAgIH1cbiAgICByb3crKztcbiAgICBjb2wtLTtcbiAgfVxufVxuXG53aW5kb3cuYm9hcmRVdGlscyA9IGJvYXJkVXRpbHM7Il19